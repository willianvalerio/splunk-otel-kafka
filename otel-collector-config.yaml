extensions:
  health_check:
  http_forwarder:
    egress:
      # TODO: Ensure this is set properly
      endpoint: "https://api.${SPLUNK_REALM}.signalfx.com"
  zpages:
receivers:
  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu:
      disk:
      filesystem:
      memory:
      network:
      # System load average metrics https://en.wikipedia.org/wiki/Load_(computing)
      load:
      # Paging/Swap space utilization and I/O metrics
      paging:
      # Aggregated system process count metrics
      processes:
      # System processes metrics, disabled by default
      # process:
  jaeger:
    protocols:
      grpc:
      thrift_binary:
      thrift_compact:
      thrift_http:
  otlp:
    protocols:
      grpc:
      http:
  sapm:
  signalfx:
  # This section is used to collect OpenTelemetry metrics
  # Even if just a SignalFx ÂµAPM customer, these metrics are included
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['localhost:8888']
              # If you want to use the environment filter
              # In the SignalFx dashboard
              labels:
                environment: demo
          metric_relabel_configs:
            - source_labels: [ __name__ ]
              regex: '.*grpc_io.*'
              action: drop
  # Enable Zipkin to support Istio Mixer Adapter
  # https://github.com/signalfx/signalfx-istio-adapter
  zipkin:
processors:
  batch:
  # Optional: If you have a different environment tag name
  # If this option is enabled it must be added to the pipeline section below
  #attributes/copyfromexistingkey:
    #actions:
    #- key: environment
      #from_attribute: YOUR_EXISTING_TAG_NAME
      #action: upsert
  # Optional: If you want to add an environment tag
  # If this option is enabled it must be added to the pipeline section below
  #attributes/newenvironment:
    #actions:
    #- key: environment
      #value: "YOUR_ENVIRONMENT_NAME"
      #action: insert
  # Enabling the memory_limiter is strongly recommended for every pipeline.
  # Configuration is based on the amount of memory allocated to the collector.
  # The configuration below assumes 2GB of memory. In general, the ballast
  # should be set to 1/3 of the collector's memory, the limit should be 90% of
  # the collector's memory up to 2GB, and the spike should be 25% of the
  # collector's memory up to 2GB. In addition, the "--mem-ballast-size-mib" CLI
  # flag must be set to the same value as the "ballast_size_mib". For more
  # information, see
  # https://github.com/open-telemetry/opentelemetry-collector/blob/main/processor/memorylimiter/README.md
  memory_limiter:
    # TODO: Ensure this is set properly
    ballast_size_mib: 168
    check_interval: 2s
    # TODO: Ensure this is set properly
    limit_mib: 460
  resourcedetection:
    detectors: [system]
    override: false
exporters:
  # Traces
  sapm:
    # TODO: Ensure this is set properly
    access_token: "${SPLUNK_ACCESS_TOKEN}"
    # TODO: Ensure this is set properly
    endpoint: "https://ingest.${SPLUNK_REALM}.signalfx.com/v2/trace"
  # Metrics
  signalfx:
    # TODO: Ensure this is set properly
    access_token: "${SPLUNK_ACCESS_TOKEN}"
    # TODO: Ensure this is set properly
    realm: "${SPLUNK_REALM}"
service:
  extensions:
    - health_check
    - http_forwarder
    - zpages
  pipelines:
    traces:
      receivers: [jaeger, otlp, sapm, zipkin]
      processors:
        - memory_limiter
        - resourcedetection
        - batch
      exporters: [sapm, signalfx]
    metrics:
      receivers:
        - otlp
        - signalfx
        - prometheus
        - hostmetrics
      processors:
        - memory_limiter
        - batch
        - resourcedetection
      exporters: [signalfx]
    logs:
      receivers: [signalfx]
      processors:
        - memory_limiter
        - batch
        - resourcedetection
      exporters: [signalfx]